networks:
    app_network:
      driver: bridge
services:
  redis_db:
    image: redis:latest
    container_name: redis_db
    restart: always
    ports:
      - "6379:6379"
    networks:
      - app_network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s

  postgres_db:
    image: postgres:latest
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    networks:
      - app_network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s
  
  vote_app:
    build: ./vote
    container_name: vote_app
    restart: on-failure
    depends_on:
      redis_db:
        condition: service_healthy
    ports:
      - "8080:8080"
    networks:
      - app_network
    environment:
      - REDIS_HOST=redis_db

  result_app:
    build: ./result
    container_name: result_app
    restart: on-failure
    depends_on:
      postgres_db:
        condition: service_healthy
    ports:
      - "8888:8888"
    networks:
      - app_network
    environment:
      - POSTGRES_HOST=postgres_db

  worker_app:
    build: ./worker
    container_name: worker_app
    restart: on-failure
    depends_on:
      redis_db:
        condition: service_healthy
      postgres_db:
        condition: service_healthy
    networks:
      - app_network
    environment:
      - REDIS_HOST=redis_db
      - POSTGRES_HOST=postgres_db

volumes:
  redis_data:
  postgres_data:
