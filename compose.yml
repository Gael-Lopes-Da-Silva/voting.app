networks:
    frontend_network:
        driver: bridge
    backend_network:
        driver: bridge

services:
    redis_db:
        image: redis:latest
        container_name: redis_db
        restart: always
        volumes:
            - ./data/redis:/data
        ports:
            - 6379:6379
        networks:
            - frontend_network
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 30s
            retries: 3
            start_period: 10s
            timeout: 10s

    postgres_db:
        image: postgres:latest
        container_name: postgres_db
        restart: always
        environment:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: postgres
            POSTGRES_DB: postgres
        volumes:
            - ./data/postgres:/var/lib/postgresql/data
        ports:
            - 5432:5432
        networks:
            - backend_network
        healthcheck:
            test: ["CMD", "pg_isready", "-U", "postgres"]
            interval: 30s
            retries: 3
            start_period: 10s
            timeout: 10s

    vote_app:
        build: ./vote
        container_name: vote_app
        restart: on-failure
        ports:
            - 8080:8080
        networks:
            - frontend_network
        depends_on:
            redis_db:
                condition: service_healthy

    result_app:
        build: ./result
        container_name: result_app
        restart: on-failure
        ports:
            - 8888:8888
        networks:
            - backend_network
        depends_on:
            postgres_db:
                condition: service_healthy

    worker_app:
        build: ./worker
        container_name: worker_app
        restart: on-failure
        networks:
            - frontend_network
            - backend_network
        depends_on:
            redis_db:
                condition: service_healthy
            postgres_db:
                condition: service_healthy
